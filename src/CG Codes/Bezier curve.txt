#include <GL/glut.h>
#include <cmath>

class Point {
public:
    int x, y;
    void setxy(int _x, int _y) { x = _x; y = _y; }
};

static int POINTSNUM = 0;
static Point points[4];

void init() {
    glClearColor(0, 0, 0, 0);
    glColor3f(1, 1, 1);
    glPointSize(4);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 600, 0, 480);
}

void setPoint(Point p) {
    glBegin(GL_POINTS); 
    glVertex2f(p.x, p.y);
    glEnd(); 
    glFlush();
}

void setLine(Point p1, Point p2) {
    glBegin(GL_LINES); 
    glVertex2f(p1.x, p1.y);
    glVertex2f(p2.x, p2.y);
    glEnd(); 
    glFlush();
}

Point bezier(Point p1, Point p2, Point p3, Point p4, double t) {
    double u = 1 - t;
    double a1 = u * u * u, a2 = 3 * u * u * t, a3 = 3 * u * t * t, a4 = t * t * t;
    Point p;
    p.x = a1 * p1.x + a2 * p2.x + a3 * p3.x + a4 * p4.x;
    p.y = a1 * p1.y + a2 * p2.y + a3 * p3.y + a4 * p4.y;
    return p;
}

void mouseFunc(int button, int state, int x, int y) {
    if (state == GLUT_DOWN) {
        points[POINTSNUM].setxy(x, 480 - y);
        glColor3f(1, 0, 0);
        setPoint(points[POINTSNUM]);
        if (POINTSNUM > 0) setLine(points[POINTSNUM - 1], points[POINTSNUM]);

        if (POINTSNUM == 3) {
            glColor3f(1, 1, 0);
            Point curr = points[0];
            for (double t = 0; t <= 1.0; t += 0.05) {
                Point next = bezier(points[0], points[1], points[2], points[3], t);
                setLine(curr, next);
                curr = next;
            }
            POINTSNUM = 0;
        } else POINTSNUM++;
    }
}

void display() {}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowSize(600, 480);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bezier Curve");
    init();
    glutMouseFunc(mouseFunc);
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

