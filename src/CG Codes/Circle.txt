#include <GL/glut.h>
#include <iostream>
using namespace std;

#define WIDTH 700
#define HEIGHT 700

int radius;

// Plot 8 symmetric points
void setpixel(int x, int y)
{
    glBegin(GL_POINTS);
        glVertex2i(x, y);
        glVertex2i(-x, y);
        glVertex2i(x, -y);
        glVertex2i(-x, -y);
        glVertex2i(y, x);
        glVertex2i(-y, x);
        glVertex2i(y, -x);
        glVertex2i(-y, -x);
    glEnd();
}

// Bresenhamâ€™s circle drawing algorithm centered at origin
void bresenhamCircle()
{
    int x = 0;
    int y = radius;
    int d = 3 - 2 * radius;

    while (x <= y)
    {
        setpixel(x, y);
        if (d < 0)
        {
            d = d + 4 * x + 6;
        }
        else
        {
            d = d + 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

// Draw X and Y axes
void drawAxes()
{
    glColor3f(0, 0, 0); // black
    glBegin(GL_LINES);
        glVertex2i(-WIDTH / 2, 0);
        glVertex2i(WIDTH / 2, 0);
        glVertex2i(0, -HEIGHT / 2);
        glVertex2i(0, HEIGHT / 2);
    glEnd();
}

// OpenGL display function
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();

    glColor3f(0, 0, 1); // Blue circle
    bresenhamCircle();

    glFlush();
}

// Initialization
void initialize()
{
    glClearColor(1, 1, 1, 0); // White background
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-WIDTH / 2, WIDTH / 2, -HEIGHT / 2, HEIGHT / 2);
}

// Main function
int main(int argc, char **argv)
{
    cout << "Enter radius of circle: ";
    cin >> radius;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Circle Centered at Origin");

    initialize();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
